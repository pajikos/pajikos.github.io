<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>cloud - Tag - blog.pavelsklenar.com</title><link>https://blog.pavelsklenar.com/tags/cloud/</link><description>cloud - Tag - blog.pavelsklenar.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sklenar.pav@gmail.com (Pavel Sklenar)</managingEditor><webMaster>sklenar.pav@gmail.com (Pavel Sklenar)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 31 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.pavelsklenar.com/tags/cloud/" rel="self" type="application/rss+xml"/><item><title>Azure Functions in Kubernetes Example</title><link>https://blog.pavelsklenar.com/azure-functions-in-k8s/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/azure-functions-in-k8s/</guid><description>Introduction This tutorial shows how to deploy two simple examples of Azure Functions written in Python to Kubernetes (AKS used here, but not required).
Envrironment setup Install prerequisites Docker (e.g. https://www.docker.com/products/docker-desktop) Kubectl (https://kubernetes.io/docs/tasks/tools/install-kubectl/) Azure cli (https://docs.microsoft.com/cs-cz/cli/azure/install-azure-cli) Func cli (https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local) Login to the Docker registry You need a Docker registry with push rights to be able to upload images with two functions. You have to be logged, here is an example when using Azure Container Registry:</description></item><item><title>Extend local network to cloud with Nebula</title><link>https://blog.pavelsklenar.com/extend-local-network-to-cloud-with-nebula/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/extend-local-network-to-cloud-with-nebula/</guid><description>Nebula Network Nebula is a scalable overlay networking tool with a focus on performance, simplicity, and security. It lets you seamlessly connect computers anywhere in the world. This post is about extending the local network by another server running anywhere in the world, everything secured by the Nebula network.
Devices on the local network should be able to access devices on the Nebula network and some devices need to access devices on the local network as well.</description></item><item><title>Transfer data between two systems using Azure functions</title><link>https://blog.pavelsklenar.com/azure-functions-system-integration/</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/azure-functions-system-integration/</guid><description>Introduction This simple demo shows possible integration between two systems (system A and system B) using Azure Functions.
Note The full example with all resources could be found here on GitHub. The architecture constraints:
All updates from the system A must be transfered into the system B The system A is listening on HTTP with REST API The system B is listening on HTTP with REST API The system B is not fully compatible in message definitions, so field mapping must be used The mapping must be saved in DB (I chose CosmosDB) Due to missing push notification in the system A, its API must be periodically checked The system B may be occasionally offline, so some type of persistent bus should be used.</description></item></channel></rss>