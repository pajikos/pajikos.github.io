<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>java - Category - blog.pavelsklenar.com</title><link>https://blog.pavelsklenar.com/categories/java/</link><description>java - Category - blog.pavelsklenar.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sklenar.pav@gmail.com (Pavel Sklenar)</managingEditor><webMaster>sklenar.pav@gmail.com (Pavel Sklenar)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 27 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.pavelsklenar.com/categories/java/" rel="self" type="application/rss+xml"/><item><title>Vulnerability Scan as part of Continuous Integration</title><link>https://blog.pavelsklenar.com/vulnerability-scan-as-part-of-continuous-integration/</link><pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/vulnerability-scan-as-part-of-continuous-integration/</guid><description>Have you ever image how many vulnerabilities exist in your applications since it was created? And how many of them comes from its dependencies?
The high secure environments require to perform regularly checks to discover any new vulnerability issue in your application. These checks can be done manually, but it may take a lot of time, especially if you are using the current frameworks (e.g. Spring Boot) with many and many transitive dependencies.</description></item><item><title>Spring Boot: Run and Build in Docker</title><link>https://blog.pavelsklenar.com/spring-boot-run-and-build-in-docker/</link><pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/spring-boot-run-and-build-in-docker/</guid><description>It exists many “Docker for Java developers” guides, but most of them does not take care of small and efficient Docker images.
I have combined many resources how to make a simple and fast Docker image containing any of Spring Boot like application.
My goals:
Create a single and portable Dockerfile (as general as possible). Make Maven build inside Docker (no need to have Maven locally). Don&amp;rsquo;t download any Maven dependencies repeatedly, if no changes in pom.</description></item><item><title>Securing REST APIs with Client Certificates</title><link>https://blog.pavelsklenar.com/securing-rest-api-with-client-certificate/</link><pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/securing-rest-api-with-client-certificate/</guid><description>This post is about an example of securing REST API with a client certificate (a.k.a. X.509 certificate authentication).
In other words, a client verifies a server according to its certificate and the server identifies that client according to a client certificate (so-called the mutual authentication).
In connection with Spring Security, we will be able to perform some additional authentication and authorization.
Technologies used:
Spring Boot 2.0.5.RELEASE Spring Web + Security 5.</description></item><item><title>TCP Port Scanner Example using Spring Shell</title><link>https://blog.pavelsklenar.com/tcp-port-scanner-using-spring-shell/</link><pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/tcp-port-scanner-using-spring-shell/</guid><description>This post is about using Spring Shell to make a simple application for scanning open TCP ports.
Technologies used:
Spring Boot 2.0.5.RELEASE Spring Shell 2.0.1.RELEASE Quick Overview:
Final Project Structure Creating a new base Spring Boot project Needs for parallelism How check whether a port is open? Integrating with Spring Shell How it works Final Project Structure The final project structure" The final project structure</description></item><item><title>Spring Security with Radius Login in Spring Boot</title><link>https://blog.pavelsklenar.com/spring-security-radius-login/</link><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/spring-security-radius-login/</guid><description>In this example, we will secure a home page (/home) with Spring Security using Radius authentication.
Technologies used:
Spring Boot 2.0.4.RELEASE TinyRadius 1.0.1 Embedded Tomcat 8.5.23 Quick Overview:
Create a new base Spring Boot project with required dependencies Create a simple login using Spring Security Create your own RadiusAuthenticationProvider Simple test with a real Radius Server 1. Project Structure Project structure" Project structure
2. Create a new base Spring Boot project We will start with a new project generated by Spring Initializr.</description></item><item><title>Spring Integration: SFTP Download using Key-Based Authentication</title><link>https://blog.pavelsklenar.com/spring-integration-sftp-download/</link><pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/spring-integration-sftp-download/</guid><description>This example will demonstrate how to use Spring Integration for downloading files from a remote SFTP server. Two possible authentications could be used, i.e. public key or password.
Technologies used:
Spring Boot 2.0.4.RELEASE Spring Integration 5.0.7.RELEASE (managed by Spring Boot) Spring 5.0.8.RELEASE (managed by Spring Boot) Quick overview:
Create SFTP Session Factory, i.e. DefaultSftpSessionFactory Create and set up InboundChannelAdapter to regularly check a remote SFTP server for new files Create MessageHandler to process incoming files Project Structure A final project directory structurespring-integration sftp download example</description></item><item><title>Spring Integration: SFTP Upload Example using Key-Based Authentication</title><link>https://blog.pavelsklenar.com/spring-integration-sftp-upload-example/</link><pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/spring-integration-sftp-upload-example/</guid><description>This example will demonstrate how to use Spring Integration for uploading files to a remote SFTP server. You can use both of possible authentication methods, i.e. with a public key or with a password. The real example shows the public key authentication only because it is a more production-ready choice.
Technologies used:
Spring Boot 2.0.4.RELEASE Spring Integration 5.0.7.RELEASE (managed by Spring Boot) Spring 5.0.8.RELEASE (managed by Spring Boot) Quick overview:</description></item><item><title>Parallel Processing in Java</title><link>https://blog.pavelsklenar.com/parallel-processing-java/</link><pubDate>Fri, 18 Mar 2016 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/parallel-processing-java/</guid><description>This post shows how to implement parallelism in Java using its native java.util.concurrent classes.
I mean especially using parallel Fork-Join Framework (available since Java 1.7), which is most suitable for processing of high complex (CPU intensive) tasks. I mean that case when you have one very complex task and you want to use all of your available computing resources to process your single task in the fastest time.
The basic idea of the Fork-Join Framework concerns &amp;ldquo;Divide and Conquer&amp;rdquo;.</description></item><item><title>Using JDBC FilteredRowSet - Simple Example</title><link>https://blog.pavelsklenar.com/using-filteredrowset-simple-example/</link><pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate><author>sklenar.pav@gmail.com</author><dc:creator>Pavel Sklenar</dc:creator><guid>https://blog.pavelsklenar.com/using-filteredrowset-simple-example/</guid><description>This post shows how to use a FilteredRowSet object. It lets you filter the number of rows that are visible in a RowSet object so that you can work with only the relevant data that you need. You may decide how you want to &amp;ldquo;filter&amp;rdquo; the data and apply that filter to a FilteredRowSet object. In other words, the FilteredRowSet object makes visible only the rows of data that fit within the limits you set.</description></item></channel></rss>